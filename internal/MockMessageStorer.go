// Code generated by mockery v2.52.4. DO NOT EDIT.

package internal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMessageStorer is an autogenerated mock type for the MessageStorer type
type MockMessageStorer struct {
	mock.Mock
}

type MockMessageStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageStorer) EXPECT() *MockMessageStorer_Expecter {
	return &MockMessageStorer_Expecter{mock: &_m.Mock}
}

// GetAllMessages provides a mock function with given fields: ctx
func (_m *MockMessageStorer) GetAllMessages(ctx context.Context) ([]Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMessages")
	}

	var r0 []Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageStorer_GetAllMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMessages'
type MockMessageStorer_GetAllMessages_Call struct {
	*mock.Call
}

// GetAllMessages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessageStorer_Expecter) GetAllMessages(ctx interface{}) *MockMessageStorer_GetAllMessages_Call {
	return &MockMessageStorer_GetAllMessages_Call{Call: _e.mock.On("GetAllMessages", ctx)}
}

func (_c *MockMessageStorer_GetAllMessages_Call) Run(run func(ctx context.Context)) *MockMessageStorer_GetAllMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessageStorer_GetAllMessages_Call) Return(_a0 []Message, _a1 error) *MockMessageStorer_GetAllMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageStorer_GetAllMessages_Call) RunAndReturn(run func(context.Context) ([]Message, error)) *MockMessageStorer_GetAllMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageByID provides a mock function with given fields: ctx, id
func (_m *MockMessageStorer) GetMessageByID(ctx context.Context, id string) (*Message, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageByID")
	}

	var r0 *Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageStorer_GetMessageByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageByID'
type MockMessageStorer_GetMessageByID_Call struct {
	*mock.Call
}

// GetMessageByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMessageStorer_Expecter) GetMessageByID(ctx interface{}, id interface{}) *MockMessageStorer_GetMessageByID_Call {
	return &MockMessageStorer_GetMessageByID_Call{Call: _e.mock.On("GetMessageByID", ctx, id)}
}

func (_c *MockMessageStorer_GetMessageByID_Call) Run(run func(ctx context.Context, id string)) *MockMessageStorer_GetMessageByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageStorer_GetMessageByID_Call) Return(_a0 *Message, _a1 error) *MockMessageStorer_GetMessageByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageStorer_GetMessageByID_Call) RunAndReturn(run func(context.Context, string) (*Message, error)) *MockMessageStorer_GetMessageByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageStorer creates a new instance of MockMessageStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageStorer {
	mock := &MockMessageStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
