// Code generated by mockery v2.52.4. DO NOT EDIT.

package internal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGoogleChatProvider is an autogenerated mock type for the GoogleChatProvider type
type MockGoogleChatProvider struct {
	mock.Mock
}

type MockGoogleChatProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleChatProvider) EXPECT() *MockGoogleChatProvider_Expecter {
	return &MockGoogleChatProvider_Expecter{mock: &_m.Mock}
}

// SendBrokenMessage provides a mock function with given fields: ctx, message
func (_m *MockGoogleChatProvider) SendBrokenMessage(ctx context.Context, message BrokenMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendBrokenMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, BrokenMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoogleChatProvider_SendBrokenMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBrokenMessage'
type MockGoogleChatProvider_SendBrokenMessage_Call struct {
	*mock.Call
}

// SendBrokenMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message BrokenMessage
func (_e *MockGoogleChatProvider_Expecter) SendBrokenMessage(ctx interface{}, message interface{}) *MockGoogleChatProvider_SendBrokenMessage_Call {
	return &MockGoogleChatProvider_SendBrokenMessage_Call{Call: _e.mock.On("SendBrokenMessage", ctx, message)}
}

func (_c *MockGoogleChatProvider_SendBrokenMessage_Call) Run(run func(ctx context.Context, message BrokenMessage)) *MockGoogleChatProvider_SendBrokenMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BrokenMessage))
	})
	return _c
}

func (_c *MockGoogleChatProvider_SendBrokenMessage_Call) Return(_a0 error) *MockGoogleChatProvider_SendBrokenMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoogleChatProvider_SendBrokenMessage_Call) RunAndReturn(run func(context.Context, BrokenMessage) error) *MockGoogleChatProvider_SendBrokenMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, message
func (_m *MockGoogleChatProvider) SendMessage(ctx context.Context, message Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoogleChatProvider_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockGoogleChatProvider_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message Message
func (_e *MockGoogleChatProvider_Expecter) SendMessage(ctx interface{}, message interface{}) *MockGoogleChatProvider_SendMessage_Call {
	return &MockGoogleChatProvider_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, message)}
}

func (_c *MockGoogleChatProvider_SendMessage_Call) Run(run func(ctx context.Context, message Message)) *MockGoogleChatProvider_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Message))
	})
	return _c
}

func (_c *MockGoogleChatProvider_SendMessage_Call) Return(_a0 error) *MockGoogleChatProvider_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoogleChatProvider_SendMessage_Call) RunAndReturn(run func(context.Context, Message) error) *MockGoogleChatProvider_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoogleChatProvider creates a new instance of MockGoogleChatProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleChatProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleChatProvider {
	mock := &MockGoogleChatProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
